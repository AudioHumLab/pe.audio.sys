#! /usr/bin/env python3

# Copyright (c) 2021 Rafael Sánchez
# This file is part of 'pe.audio.sys', a PC based personal audio system.
#
# 'pe.audio.sys' is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# 'pe.audio.sys' is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with 'pe.audio.sys'.  If not, see <https://www.gnu.org/licenses/>.

"""
    A general purpose TCP server to run a processing module

    Usage:   server.py  <processing_module>  <address>  <port> [-v]

    e.g:     server.py  peaudiosys localhost 9990

    (use -v for VERBOSE debug info printout)
"""

# UNDERSTANDING A SERVER:
# https://realpython.com/python-sockets/#echo-client-and-server
# One thing that’s imperative to understand is that we now have
# a new socket object from accept(). This is important since
# it’s the socket that you’ll use to communicate with the client.
# It’s distinct from the listening socket that the server is using
# to accept new connections. So two sockets are playing at the same time.

# asyncio — Asynchronous I/O » Streams
# https://docs.python.org/3/library/asyncio-stream.html
import  asyncio
import  os
import  sys
from    miscel import Fmt
UHOME = os.path.expanduser("~")
sys.path.append( f'{UHOME}/pe.audio.sys/share/services' )

# You can use these properties when importing this module:
SERVICE = ''
CLIADDR = ('', 0)


async def handle_client(reader, writer):

    # The connection (the 2nd socket)
    global CLIADDR
    CLIADDR = writer.get_extra_info('peername')


    # Receiving a command phrase
    raw = await reader.read(100)
    cmd = raw.decode().strip()
    if VERBOSE:
        print(f'(server-{SERVICE}) Rx: {cmd}')

    # Processing the command and reading the result of execution
    result = MODULE.do( cmd )

    # Sending back the result
    writer.write( result.encode() )
    await writer.drain()
    writer.close()

    if VERBOSE:
        print(f'(server-{SERVICE}) Tx: {result}')


async def run_server(addr, port):
    # Prepare the server (the 1st listening socket)
    server = await asyncio.start_server(handle_client, addr, port)

    # MAIN LOOP to accept, process and close connections.
    async with server:
        await server.serve_forever()


if __name__ == '__main__':

    try:
        SERVICE, ADDR, PORT  = sys.argv[1:4]
        PORT = int(PORT)
    except:
        print(__doc__)
        sys.exit(-1)

    if '-v' in sys.argv:
        VERBOSE = True
    else:
        VERBOSE = False

    # Importing the service module to be used later when processing commands
    # https://python-reference.readthedocs.io/en/latest/docs/functions/__import__.html
    MODULE = __import__(SERVICE)

    print( f'{Fmt.BOLD}{Fmt.BLUE}(server.py) will use \'{SERVICE}.py\' module, '
           f'listening at {ADDR}:{PORT} ...{Fmt.END}' )
    asyncio.run( run_server(ADDR, PORT) )
