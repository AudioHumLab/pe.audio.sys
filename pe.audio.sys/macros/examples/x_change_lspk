#!/usr/bin/env python3
"""
    !!! ACHTUNG this is purely GEEK  >:-)

    Alternates between two loudspeaker sets, both attached to differents
    channels ports from THE SAME system sound card.

    You need to prepare a macro file whose filename must contain the
    belonging loudspeaker name.

"""
import os
import  sys
from    subprocess import Popen, call, check_output
from    time import sleep
import  templates.lspk_macro as lm

UHOME       = os.path.expanduser("~")
sys.path.append( f'{UHOME}/pe.audio.sys/share/miscel' )

from    miscel import CONFIG


#########   SETS OF LOUDSPEAKERS TO TOGGLE BETWEEN      ########
LSPK_A = "DynC5"
DRC_A  = 'equilat'

LSPK_B = "cardiojorns"
DRC_B  = 'equilat'
################################################################

def trigger_DAC_poweron():
    tmp = ''
    try:
        tmp = check_output('sispmctl -g 1', shell=True).decode()
    except:
        pass

    if 'off' in tmp:
        print('Switching ON the DAC switch ...')
        call(f'{UHOME}/bin/regleta.py off 4', shell=True)
        call(f'{UHOME}/bin/regleta.py on 1', shell=True)
        sleep(2)
        Popen(f'{UHOME}/bin/regleta.py on 4', shell=True)
    else:
        print('DAC switch is already ON')


if __name__ == "__main__":

    # Toggling
    curr_lspk = CONFIG["loudspeaker"]
    if curr_lspk == LSPK_A:
        new_lspk = LSPK_B
        new_drc  = DRC_B
    else:
        new_lspk = LSPK_A
        new_drc  = DRC_A

    # Topping DAC needs to be triggered (this takes ~1 s if already on)
    if 'DynC5' in new_lspk:
        trigger_DAC_poweron()

    # Must define at least lmMY_LSPK['lspk_name'] before calling lm.main()
    lm.MY_LSPK['lspk_name'] = new_lspk
    lm.MY_LSPK['drc_set']   = new_drc
    lm.main()

    print(new_lspk, new_drc)

