#!/usr/bin/env python3
"""
    Alternates between two loudspeaker sets, both attached to differents
    channels ports from the same system sound card.
       ACHTUNG this is purely geek  >:-)
"""
############### USER SETTINGS: ###############
lspk_A = {  'name':         'dipojorns',
            'drc_set':      'djestan_multiV2_mp',
            'xo_set':       'lp'}

lspk_B = {  'name':         'DynC5+AMRsub',
            'drc_set':      'mp_c5+sub_multip',
            'xo_set':       'lp_60Hz'}

#### DETAILS:
#
#    (i) FOA please prepare a set of copies of config.yml,
#        appropriately configured and named as following example:

#           config.yml.dipojorns
#           config.yml.DynC5+AMRsub
#
#    diffs:
#        > loudspeaker:      dipojorns       DynC5+AMRsub
#        > init_xo:          mp              mp_60Hz
#        < init_drc:         estant_mp       lp_c5+sub_multip
#        > ecasound_peq.py:  dj_estant.ecs     -not set-
#
#    Macro procedure:
#
#        - Stop preamp.py service to release .state.yml
#        - Stop ecasound script
#        - Stop Brutefir process
#        - Copy config.yml.YOURLSPK --> config.yml
#        - Adjust .state.yml so that resuming audio settings later works properly.
#        - Restart Brutefir (cd to your lspk folder)
#           (!) be SURE that your brutefir_config has a 50 dB initial level atten.
#        - Restart ecasound script if necessary
#        - Resuming audio settings from .state.yml (but leaving current input)
#        - Restart pasysctrl.py service
#        - If config.yml 'on_init:' section indicates any drc or xo ,
#          we still need to set the wanted here lspk_A/B
#        - Finally, will reselect the current input in order to retrieve any
#          particular input setting.

from subprocess import Popen
from shutil import copyfile
import os
import sys
import yaml
import subprocess as sp
from time import sleep
from socket import socket

UHOME = os.path.expanduser("~")
MAINFOLDER = f'{UHOME}/pe.audio.sys'
sys.path.append( f'{MAINFOLDER}/share/services/preamp_mod' )

# Reading pe.audio.sys configuration
configPath      = f'{MAINFOLDER}/config.yml'
current_config  = yaml.safe_load( open(configPath, 'r') )
control_addr    = current_config["peaudiosys_address"]
control_port    = current_config["peaudiosys_port"]


def check_Dyn_AMP(outlets=[1]):
    accu = []
    for o in outlets:
        tmp = sp.check_output( (f'sispmctl -m {str(o)}').split() ) \
              .split()[-1].decode()
        if tmp == 'on':
            accu.append(True)
        else:
            accu.append(False)
    return all( accu )


def turn_on__Dyn_AMP(outlets=[1]):
    for o in outlets:
        sp.call( f'sispmctl -o {str(o)}'.split() )
        sleep(.5)


def peaudiosys_command(cmd):
    host = control_addr
    port = control_port
    ans = ''
    with socket() as s:
        try:
            s.connect( (host, port) )
            s.send( cmd.encode() )
            ans = s.recv(1024).decode()
            s.close()
        except:
            print( f'(macro-7) service \'peaudiosys\' socket error on port {port}' )
    return ans


if __name__ == "__main__":

    configPath_A = f'{MAINFOLDER}/config.yml.{lspk_A["name"]}'
    configPath_B = f'{MAINFOLDER}/config.yml.{lspk_B["name"]}'
    statePath = f'{MAINFOLDER}/.state.yml'

    # Toggling thinks
    if current_config["loudspeaker"] == lspk_A["name"]:
        lspk_New = lspk_B
    else:
        lspk_New = lspk_A

    # Turning on Dynaudio AMP if needed
    if 'DynC5' in lspk_New["name"]:
        if not check_Dyn_AMP(outlets=[1,4]):
            turn_on__Dyn_AMP(outlets=[1,4])

    #  Macro procedure:

    # 1- Stop preamp.py service (the owner of state.yml)
    Popen( f'{UHOME}/bin/peaudiosys_service_restart.sh preamp stop'.split() )

    # 2- Stop ecasound script
    ecasound_in_use = False
    for item in current_config["scripts"]:
        if 'ecasound_peq.py' in item:
            ecasound_in_use = True
    if ecasound_in_use:
        Popen( f'{MAINFOLDER}/share/scripts/ecasound_peq.py stop'.split() )

    # 3- Stop Brutefir process
    Popen( f'pkill -f -KILL brutefir'.split() )
    sleep(.25)

    # 4- Copy config.yml.YOURLSPK --> config.yml
    copyfile( f'{MAINFOLDER}/config.yml.{lspk_New["name"]}',
              f'{MAINFOLDER}/config.yml')

    # 5- Adjust .state.yml so that init_audio_settings can do its job later
    new_state = yaml.safe_load( open(statePath, 'r') )
    new_state["drc_set"] = lspk_New["drc_set"]
    new_state["xo_set"]  = lspk_New["xo_set"]
    with open(statePath, 'w') as f:
        yaml.safe_dump( new_state, f, default_flow_style=False )

    # 6- Restart Brutefir (cd to your lspk folder)
    #    (!!!) BE SURE that your brutefir_config has 50dB initial level atten.
    os.chdir( f'{MAINFOLDER}/loudspeakers/{lspk_New["name"]}' )
    sp.Popen( 'brutefir brutefir_config'.split() )
    os.chdir( UHOME )
    sp.Popen( 'jack_connect pre_in_loop:output_1 brutefir:in.L'.split() )
    sp.Popen( 'jack_connect pre_in_loop:output_2 brutefir:in.R'.split() )

    # 7- Restart ecasound script if necessary
    #    ( ecasound_eq.py will automagically insert it before Brutefir ports )
    current_config = yaml.safe_load( open(configPath,'r') )
    ecasound_wanted = False
    for item in current_config["scripts"]:
        if 'ecasound_peq.py' in item:
            ecasound_wanted = True
    if ecasound_wanted:
        Popen( f'{MAINFOLDER}/share/scripts/ecasound_peq.py start'.split() )

    # 8- Resuming audio settings (but leaving current input)
    #    (i) importing core must be done here, because core needs
    #        to know the new config.yml to calculate properly the
    #        loudspeaker ref_level_gain.
    from core import init_audio_settings
    init_audio_settings()

    # 9- restart preamp.py service
    Popen( f'{UHOME}/bin/peaudiosys_service_restart.sh preamp'.split() )
    #sleep(1)

    # 10- If config.yml 'on_init:' section indicates any drc or xo ,
    #     we still need to set the wanted here at the very beginning
    #     for lspk_A or lspk_B
    ans = ''
    times = 5
    while not ans.strip() and times:
        ans = peaudiosys_command( f'preamp set_drc {lspk_New["drc_set"]}')
        sleep(.2)
        times -= 1
    if not times:
        print( f'(macro-7) error with preamp service' )

    peaudiosys_command( f'preamp set_xo  {lspk_New["xo_set"]}' )

    # 11- Reselect the source to set appropriate input settings
    peaudiosys_command( f'preamp input  {new_state["input"]}' )


